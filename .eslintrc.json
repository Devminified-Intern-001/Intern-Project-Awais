{
  "extends": ["next/core-web-vitals", "next/typescript"],

   "rules": {
    // 1. Enforce consistent indentation (2 spaces)
    "indent": ["error", 2],

    // 2. Require the use of '===' and '!=='
    "eqeqeq": ["error", "always"],

    // 3. Disallow 'var' and enforce 'let' or 'const'
    "no-var": "error",

    // 4. Disallow unused variables
    "no-unused-vars": "error",

    // 5. Enforce strict mode globally
    "strict": ["error", "global"],

    // 6. Disallow the use of 'console'
    "no-console": "error",

    // 7. Require semicolons at the end of statements
    "semi": ["error", "always"],

    // 8. Enforce the consistent use of the 'this' keyword
    "no-invalid-this": "error",

    // 9. Enforce camelCase naming convention
    "camelcase": "error",

    // 10. Disallow trailing spaces
    "no-trailing-spaces": "error",

    // 11. Disallow nested ternary expressions
    "no-nested-ternary": "error",

    // 12. Require default case in switch statements
    "default-case": "error",

    // 13. Disallow the use of `eval()`
    "no-eval": "error",

    // 14. Enforce consistent spacing before function parentheses
    "space-before-function-paren": ["error", "always"],

    // 15. Enforce consistent spacing inside parentheses
    "space-in-parens": ["error", "always"],

    // 16. Disallow unnecessary 'else' after 'return'
    "no-else-return": "error",

    // 17. Disallow the use of the 'with' statement
    "no-with": "error",

    // 18. Require the use of the 'const' keyword for variables that are never reassigned
    "prefer-const": "error",

    // 19. Disallow redundant 'return' statements in functions
    "no-useless-return": "error",

    // 20. Enforce consistent line breaks between class members
    "lines-between-class-members": ["error", "always"],

    // 21. Disallow the use of `arguments.callee`
    "no-caller": "error",

    // 22. Require all functions to have a return type annotation (for TypeScript)
    "@typescript-eslint/explicit-function-return-type": "error",

    // 23. Enforce the use of arrow functions for callbacks
    "prefer-arrow-callback": "error",

    // 24. Disallow the use of `arguments` object in functions
    "no-arguments": "error",

    // 25. Disallow the use of 'continue' statement
    "no-continue": "error",

    // 26. Enforce type-checking in switch cases
    "no-switch-case-fall-through": "error",

    // 27. Enforce consistent return behavior in functions (either always return or never return)
    "consistent-return": "error",

    // 28. Disallow function declarations in loops
    "no-loop-func": "error",

    // 29. Require function parameters to be typed (for TypeScript)
    "@typescript-eslint/explicit-module-boundary-types": "error",

    // 30. Require class members to have explicit access modifiers (for TypeScript)
    "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "explicit" }],

    // 31. Disallow the use of `__proto__` property
    "no-proto": "error",

    // 32. Disallow assignment to the `arguments` object
    "no-shadow-restricted-names": "error",

    // 33. Require destructuring for all assignments
    "prefer-destructuring": ["error", { "object": true, "array": true }],

    // 34. Require `super()` to be called in subclass constructors
    "class-methods-use-this": "error",

    // 35. Disallow reassigning function parameters
    "no-param-reassign": "error",

    // 36. Enforce the use of template literals instead of string concatenation
    "prefer-template": "error",

    // 38. Enforce consistent spacing after '//' comments
    "spaced-comment": ["error", "always"],

    // 39. Enforce consistent code style in array and object literals
    "object-curly-spacing": ["error", "always"],

    // 41. Disallow unnecessary function bindings (i.e., `.bind()`)
    "no-useless-bind": "error",

    // 44. Enforce function declarations to be at the top of the scope
    "no-inner-declarations": "error",

    // 45. Disallow redundant boolean casts
    "no-extra-boolean-cast": "error",

    // 46. Enforce the use of `for...of` instead of `for...in` for arrays
    "prefer-for-of": "error",

    // 47. Disallow declaring variables outside their usage scope
    "no-shadow": "error",

    // 48. Enforce consistent spacing before blocks and function bodies
    "space-before-blocks": "error",

    // 49. Disallow object literals with duplicate keys
    "no-dupe-keys": "error",

    // 50. Enforce consistent type checking with `typeof` operator
    "valid-typeof": "error"
  }

  }

  

